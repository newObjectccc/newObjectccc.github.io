import{_ as e,c as o,o as c,a4 as t}from"./chunks/framework.nQaBHiNx.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"前端工程化/字节新出oxlint都在推但没人讲怎么尝鲜.md","filePath":"前端工程化/字节新出oxlint都在推但没人讲怎么尝鲜.md"}'),d={name:"前端工程化/字节新出oxlint都在推但没人讲怎么尝鲜.md"},a=t('<h1 id="" tabindex="-1"><a class="header-anchor" href="#" aria-label="Permalink to &quot;&quot;">​</a></h1><h2 id="🔥字节新出oxlint都在推但没人讲怎么尝鲜-那就我来献丑吧" tabindex="-1">🔥字节新出oxlint都在推但没人讲怎么尝鲜，那就我来献丑吧~ <a class="header-anchor" href="#🔥字节新出oxlint都在推但没人讲怎么尝鲜-那就我来献丑吧" aria-label="Permalink to &quot;🔥字节新出oxlint都在推但没人讲怎么尝鲜，那就我来献丑吧~&quot;">​</a></h2><p><code>oxlint</code> 我就不多介绍了，你只需要知道速度超级快就行了，他们自研了一套 <code>oxc tree</code> 规范来替换，<code>estree</code> 的 <code>js</code> 的 <code>AST</code> 规范，说是更加契合，手贱的我，选择给公司项目上了一波，如他官网所说并非为了替换 <code>eslint</code>，而是为了优化开发体验。</p><p>先摆个观点，<code>Oxlint</code> 真的很快， 但确实如官方所说并非为了取代 <code>ESlint</code>，但他的发展路子未来的确是大概率会取代的，只要规则越来越多，并且支持自己的配置文件（<code>--help</code>中有说实验性的支持<code>.eslintrc.*</code>但是我实测还不行），或者干脆就完全支持<code>eslint</code>，哪怕<code>90%</code>。</p><p>另外，对于前端生态来说，用<code>rust</code>早就不是一个趋势了，早点学起来吧各位~</p><p>如果你又想享受<code>rust</code>带来的速率，又想获取更好的体验，其实可以试试<code>Biome</code>，我实测过2800+文件下只比<code>oxlint</code>慢了1~2秒左右，支持的规则更多，并且也支持代码风格的<code>format</code>，可能他想把 <code>eslint，prettier</code> 一网打尽。</p><p>here we go！</p><p>本文我们只简单聊聊如何结合 <code>lint-staged</code> 来使用~</p><p>更多信息请移步⬇️ <a href="https://oxc-project.github.io/" target="_blank" rel="noreferrer">Oxlint的官网 https://oxc-project.github.io/</a>✅</p><h3 id="正文开始👉" tabindex="-1">正文开始👉 <a class="header-anchor" href="#正文开始👉" aria-label="Permalink to &quot;正文开始👉&quot;">​</a></h3><hr><h4 id="开始-📌" tabindex="-1">开始 📌 <a class="header-anchor" href="#开始-📌" aria-label="Permalink to &quot;开始 📌&quot;">​</a></h4><p>我这里直接用了我之前开发的一款很多bug的开源脚手架<code>bup</code>来进行安装<code>lint-staged</code>，后续会直接支持<code>oxlint</code>。（欢迎大家一起来写bug哈~）</p><p><code>bup</code>会自动为你安装<code>husky, lint-staged</code>依赖和做基础配置，等待安装配置完成后：</p><p><img src="https://github.com/newObjectccc/newObjectccc.github.io/assets/42132586/739e2e85-d6cf-4d0e-96ec-c8e12040c4fa" alt="1"></p><p>我们只需要找到<code>.lintstagedrc.*</code>配置文件，做如下修改即可：</p><p><img src="https://github.com/newObjectccc/newObjectccc.github.io/assets/42132586/0bd0b0d8-9e27-40c9-8bc9-4b724a1c7976" alt="2"></p><p>这样当我们每次提交代码时，会自动执行<code>oxlint</code>为我们检测：</p><p>这里需要注意一点是，默认情况下<code>warning</code>并不会抛出错误，停止后续代码提交，如果你想让<code>warning</code>抛出错误，请一定要添加<code>--max-warnings=1</code>的入参。</p><hr><p>😊okk~ 今天就水到这儿，快去尝鲜 <code>oxlint</code> 吧~</p>',21),i=[a];function n(r,s,l,p,_,h){return c(),o("div",null,i)}const x=e(d,[["render",n]]);export{u as __pageData,x as default};
