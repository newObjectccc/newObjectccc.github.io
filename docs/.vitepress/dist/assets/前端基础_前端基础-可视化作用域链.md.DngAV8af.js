import{_ as s,c as i,o as a,a4 as e}from"./chunks/framework.nQaBHiNx.js";const y=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"前端基础/前端基础-可视化作用域链.md","filePath":"前端基础/前端基础-可视化作用域链.md"}'),n={name:"前端基础/前端基础-可视化作用域链.md"},p=e(`<h1 id="" tabindex="-1"><a class="header-anchor" href="#" aria-label="Permalink to &quot;&quot;">​</a></h1><h2 id="js作用域链-scope-chain" tabindex="-1">Js作用域链（Scope Chain） <a class="header-anchor" href="#js作用域链-scope-chain" aria-label="Permalink to &quot;Js作用域链（Scope Chain）&quot;">​</a></h2><p>这是一篇我自己翻译的前端基础博文，原作者是Lydia Hallie。 想看原文的小伙伴可以直接转到 <a href="https://dev.to/lydiahallie/javascript-visualized-scope-chain-13pd" target="_blank" rel="noreferrer">⚡️⛓JavaScript Visualized: Scope (Chain)</a></p><p>here we go！</p><p>注意此文章需要你有一定的关于执行上下文的基础，需要知道<code>AO</code>,<code>GO</code>,<code>Execution Context</code></p><h3 id="正文开始👉" tabindex="-1">正文开始👉 <a class="header-anchor" href="#正文开始👉" aria-label="Permalink to &quot;正文开始👉&quot;">​</a></h3><hr><h4 id="⚡️⛓javascript-可视化-作用域链-scope-chain" tabindex="-1">⚡️⛓JavaScript 可视化: 作用域链 Scope (Chain) <a class="header-anchor" href="#⚡️⛓javascript-可视化-作用域链-scope-chain" aria-label="Permalink to &quot;⚡️⛓JavaScript 可视化: 作用域链 Scope (Chain)&quot;">​</a></h4><p>是时候学习作用域链了🕺🏼在这篇文章中我会假定你有执行上下文的基础知识：不过很快我会写一篇关于执行上下文的文章的。😃</p><p>我们先来看看下面这段代码:</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Lydia&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> age</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 21</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> city</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;San Francisco&quot;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getPersonInfo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Sarah&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> age</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 22</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">} is \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">age</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">} and lives in \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">city</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getPersonInfo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span></code></pre></div><p>我们调用了<code>getPersonInfo</code>函数，它返回一个包含<code>name</code>、<code>age</code>和<code>city</code>变量值的字符串：<code>Sarah is 22 and lives in San Francisco</code>. 但是，<code>getPersonInfo</code>函数中没有一个名为<code>city</code>的变量🤨？它是如何知道<code>city</code>的值的呢？</p><p>首先，为不同的上下文设置了内存空间。我们有默认的全局上下文（在浏览器中是<code>window</code>，在<code>Node</code>中是<code>global</code>），以及调用的<code>getPersonInfo</code>函数的局部上下文。每个上下文还都有一个作用域链。</p><p>对于<code>getPersonInfo</code>函数，作用域链大致如下（不要担心，现在不必理解）：</p><p><img src="https://cqrywhcb-test.oss-cn-chengdu.aliyuncs.com/scope1.png" alt="1"></p><p>作用域链基本上是一个“引用链”，它包含了对包含在执行上下文中的可以在该执行上下文中引用的值（和其他作用域）的引用的对象。 (⛓:“嘿，这些都是你可以在这个上下文中引用的值。”) 作用域链是在创建执行上下文时创建的，也就是在运行时创建的！</p><p>然而，在这篇文章中，我不会讨论激活对象<code>AO</code>（Activation Object）或一般的执行上下文，让我们只关注作用域！在以下示例中，执行上下文中的键值对表示作用域链对变量的引用。</p><p><img src="https://cqrywhcb-test.oss-cn-chengdu.aliyuncs.com/scope2.png" alt="2"></p><p>全局执行上下文的作用域链引用了3个变量：<code>name</code>（值为Lydia）、<code>age</code>（值为21）和<code>city</code>（值为San Francisco）。在局部上下文中，我们引用了2个变量：<code>name</code>（值为Sarah）和<code>age</code>（值为22）。</p><p>当我们尝试在getPersonInfo函数中访问变量时，引擎首先检查局部作用域链。</p><p><img src="https://cqrywhcb-test.oss-cn-chengdu.aliyuncs.com/scope3.gif" alt="3"></p><p>在局部作用域链中，我们引用了<code>name</code>和<code>age</code>变量！<code>name</code>的值是Sarah，<code>age</code>的值是22。但是，当它尝试访问<code>city</code>变量时会发生什么呢？</p><p>为了找到<code>city</code>变量的值，引擎会“沿着作用域链向上查找”。这基本上意味着引擎不会轻易放弃：它会努力查找在局部作用域所引用的外部作用域中，这种情况下是全局对象<code>GO</code>（Global Object），是否存在<code>city</code>变量的值。</p><p><img src="https://cqrywhcb-test.oss-cn-chengdu.aliyuncs.com/scope4.gif" alt="4"></p><p>在全局上下文中，我们声明了一个值为San Francisco的<code>city</code>变量，并对它进行了引用。现在我们有了该变量的值，<code>getPersonInfo</code>函数就可以返回字符串&quot;Sarah is 22 and lives in San Francisco&quot;🎉</p><p>我们可以沿着作用域链向下查找，但是不能沿着作用域链向上查找（好吧，这可能会让人感到困惑，因为有些人说向上而不是向下，所以我会重新表述一下：你可以进入外部作用域，但不能进入更内（更内。。。？）部的作用域。我喜欢把它想象成瀑布的形象：</p><p>（<em>这里我本人稍微插一句，原作者说向上而不是向下，其实是按照执行栈的堆叠顺序来说的，因为执行栈 FILO, 我点出来，希望能帮你理解</em>）</p><p><img src="https://cqrywhcb-test.oss-cn-chengdu.aliyuncs.com/scope5.png" alt="5"></p><p>或者更深：（<em>我本人继续插一句，更深就是向下的意思</em>）</p><p><img src="https://cqrywhcb-test.oss-cn-chengdu.aliyuncs.com/scope6.png" alt="6"></p><p>让我们以这段代码为例：</p><p><img src="https://cqrywhcb-test.oss-cn-chengdu.aliyuncs.com/scope7.png" alt="7"></p><p>几乎是一样的，但有一个很大的区别：我们现在仅在<code>getPersonInfo</code>函数中声明了<code>city</code>变量，而没有在全局作用域中声明它。我们也没有调用<code>getPersonInfo</code>函数，因此也没有创建局部上下文。然而，我们尝试在全局上下文中访问<code>name</code>、<code>age</code>和<code>city</code>的值。</p><p><img src="https://cqrywhcb-test.oss-cn-chengdu.aliyuncs.com/scope8.gif" alt="8"></p><p>它抛出了一个<code>ReferenceError</code>！在全局作用域中找不到名为<code>city</code>的变量的引用，也没有外部作用域可以查找，它不能沿着作用域链向上查找。</p><p>这样一来，你可以使用作用域来“保护”你的变量并重复使用变量名。</p><p>除了全局和局部作用域之外，还有块级作用域。用<code>let</code>或<code>const</code>关键字声明的变量的作用域是以最近的花括号为作用域的（<code>{}</code>）。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> age</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 21</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> checkAge</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 21</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> message</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;You cannot drink!&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> message</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> message</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;You can drink!&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> message</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>你可以将作用域看成这样：</p><p><img src="https://cqrywhcb-test.oss-cn-chengdu.aliyuncs.com/scope9.png" alt="9"></p><p>我们有全局作用域、函数作用域和两个块级作用域。我们能够声明变量<code>message</code>两次，因为这些变量的作用域限定在花括号内部。</p><p>简要回顾一下：</p><ul><li>我们可以将“作用域链”视为对当前上下文中可以访问的值的引用链。</li><li>作用域还使得我们能够重复使用在作用域链较低位置定义的变量名，因为它只能顺着作用域链向下查找，而不能向上查找。 (<em>我本人继续插一句，较低的位置也是指执行栈中的堆叠顺序，因为最后执行的函数一定是最后入栈的，如果你还是不清楚，请打开你的chrome浏览器，找到 Sources，找到 Call Stack 和 Scope，debugger一下就清楚了</em>)</li></ul><p>关于作用域（链）就是这样了！当我有空闲时间时，我可能会添加一些附加信息。如果你对任何内容感到困惑，请随时提问，我很乐意帮助！💕（<em>不要看我啊，是原作者说她要帮助你！</em>）</p><hr><p>😊okk~ 翻译完了，纯人工翻译，希望能够帮到各位，如有纰漏，欢迎指正~</p>`,46),t=[p];function c(h,l,o,d,k,r){return a(),i("div",null,t)}const F=s(n,[["render",c]]);export{y as __pageData,F as default};
