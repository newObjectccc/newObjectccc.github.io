import{_ as e,c as t,o,a4 as c}from"./chunks/framework.nQaBHiNx.js";const T=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"网络相关-偏前端/前端应该知道的curl请求.md","filePath":"网络相关-偏前端/前端应该知道的curl请求.md"}'),r={name:"网络相关-偏前端/前端应该知道的curl请求.md"},l=c('<h1 id="" tabindex="-1"><a class="header-anchor" href="#" aria-label="Permalink to &quot;&quot;">​</a></h1><h2 id="🔥前端应该知道的curl请求bash工具" tabindex="-1">🔥前端应该知道的curl请求bash工具 <a class="header-anchor" href="#🔥前端应该知道的curl请求bash工具" aria-label="Permalink to &quot;🔥前端应该知道的curl请求bash工具&quot;">​</a></h2><p>一次我和同事交谈的过程中，我发现大家很少用除了浏览器以外的其他工具或平台发起请求，但是其实在开发中，知道更多的请求方式绝对是有实实在在益处的，它能帮你提高开发效率，**至少能帮给你带来和后端口舌的优势~**😂</p><p>下面我就简单介绍一下在 <code>bash</code> 中的 <code>curl</code> 如何发起请求~</p><p>文章开头我会对 <code>curl</code> 命令先逐行注释，文章末尾再举一些简单请求的例子代码~</p><p>here we go！</p><h3 id="正文开始👉" tabindex="-1">正文开始👉 <a class="header-anchor" href="#正文开始👉" aria-label="Permalink to &quot;正文开始👉&quot;">​</a></h3><hr><p>看之前你需要知道一点点前置知识：</p><p>一般一个 <code>-</code> 通常代表这是一个入参的简写，两个 <code>--</code> 通常代表详细的书写，也就是说下面的文档里，<code>-</code> 是下面最近的 <code>--</code> 的简写， 举个栗子🌰：</p><p><code>-a</code> 就可以代替以下的入参：</p><ul><li><code>--append</code></li><li><code>--aws-sigv4</code></li><li><code>--basic</code></li><li><code>--ca-native</code></li><li><code>--cacert</code></li><li><code>--capath</code></li></ul><hr><h4 id="🔥curl-的使用文档-注释不易-且行且珍惜🤤" tabindex="-1">🔥curl 的使用文档（注释不易，且行且珍惜🤤） <a class="header-anchor" href="#🔥curl-的使用文档-注释不易-且行且珍惜🤤" aria-label="Permalink to &quot;🔥curl 的使用文档（注释不易，且行且珍惜🤤）&quot;">​</a></h4><ul><li><p>使用：curl [options...] <code>&lt;url&gt;</code></p><p><em>--abstract-unix-socket <code>&lt;path&gt;</code> 通过抽象Unix域套接字进行连接<br> --alt-svc <code>&lt;file name&gt;</code> 启用具有此缓存文件的alt-svc<br> --anyauth 选择任意身份验证方法</em></p></li><li><p>-a,</p><p><em>--append 上传时将内容附加到目标文件<br> --aws-sigv4 <code>&lt;provider1[:provider2[:region[:service]]]&gt;</code> 使用AWS V4签名验证<br> --basic 使用HTTP基本身份验证<br> --ca-native 使用本地操作系统中的CA证书<br> --cacert <code>&lt;file&gt;</code> 使用此CA证书验证对等体<br> --capath <code>&lt;dir&gt;</code> 使用此CA目录验证对等体</em></p></li><li><p>-E,</p><p><em>--cert <code>&lt;certificate[:password]&gt;</code> 客户端证书文件和密码<br> --cert-status 验证服务器证书的状态通过OCSP-staple<br> --cert-type <code>&lt;type&gt;</code> 证书类型(DER/PEM/ENG/P12)<br> --ciphers <code>&lt;list of ciphers&gt;</code> 使用的SSL密码<br> --compressed 请求压缩响应 --compressed-ssh 启用SSH压缩</em></p></li><li><p>-K,</p><p><em>--config <code>&lt;file&gt;</code> 从文件中读取配置<br> --connect-timeout <code>&lt;fractional seconds&gt;</code> 连接的最大时间<br> --connect-to HOST1:PORT1:HOST2:PORT2 连接到主机</em></p></li><li><p>-C,</p><p><em>--continue-at <code>&lt;offset&gt;</code> 恢复传输偏移量</em></p></li><li><p>-b,</p><p><em>--cookie <code>&lt;data|filename&gt;</code> 从字符串/文件发送cookie</em></p></li><li><p>-c,</p><p><em>--cookie-jar <code>&lt;filename&gt;</code> 在操作后将cookie写入文件<br> --create-dirs 创建必要的本地目录层次结构<br> --create-file-mode <code>&lt;mode&gt;</code> 创建的文件的文件模式<br> --crlf 在上传时将LF转换为CRLF<br> --crlfile <code>&lt;file&gt;</code> 使用此CRL列表<br> --curves <code>&lt;algorithm list&gt;</code> (EC)请求的TLS密钥交换算法</em></p></li><li><p>-d,</p><p><em>--data <code>&lt;data&gt;</code> HTTP POST数据<br> --data-ascii <code>&lt;data&gt;</code> HTTP POST ASCII数据<br> --data-binary <code>&lt;data&gt;</code> HTTP POST二进制数据<br> --data-raw <code>&lt;data&gt;</code> HTTP POST数据，&#39;@&#39;允许<br> --data-urlencode <code>&lt;data&gt;</code> HTTP POST数据URL编码<br> --delegation <code>&lt;LEVEL&gt;</code> GSS-API委托权限<br> --digest 使用HTTP摘要身份验证</em></p></li><li><p>-q,</p><p><em>--disable 禁用 .curlrc<br> --disable-eprt 禁用EPRT或LPRT的使用<br> --disable-epsv 禁用EPSV的使用<br> --disallow-username-in-url 不允许URL中的用户名<br> --dns-interface <code>&lt;interface&gt;</code> 用于DNS请求的接口<br> --dns-ipv4-addr <code>&lt;address&gt;</code> 用于DNS请求的IPv4地址<br> --dns-ipv6-addr <code>&lt;address&gt;</code> 用于DNS请求的IPv6地址<br> --dns-servers <code>&lt;addresses&gt;</code> DNS服务器地址<br> --doh-cert-status 通过OCSP-staple验证DoH服务器证书的状态<br> --doh-insecure 允许不安全的DoH服务器连接<br> --doh-url <code>&lt;URL&gt;</code> 通过DoH解析主机名</em></p></li><li><p>-D,</p><p><em>--dump-header <code>&lt;filename&gt;</code> 将接收到的头写入<code>&lt;filename&gt;</code><br> --egd-file <code>&lt;file&gt;</code> 用于随机数据的EGD套接字路径<br> --engine <code>&lt;name&gt;</code> 使用的加密引擎<br> --etag-compare <code>&lt;file&gt;</code> 将文件中的ETag作为自定义头部传递<br> --etag-save <code>&lt;file&gt;</code> 从请求中解析ETag并保存到文件中<br> --expect100-timeout <code>&lt;seconds&gt;</code> 等待100-continue的最长时间</em></p></li><li><p>-f,</p><p><em>--fail 在HTTP错误时立即终止并且没有输出<br> --fail-early 在第一个传输错误时终止，不继续<br> --fail-with-body 在HTTP错误但保存正文<br> --false-start 启用TLS False Start</em></p></li><li><p>-F,</p><p><em>--form <code>&lt;name=content&gt;</code> 指定多部分MIME数据<br> --form-escape 使用反斜杠转义多部分表单字段/文件名<br> --form-string <code>&lt;name=string&gt;</code> 指定多部分MIME数据<br> --ftp-account <code>&lt;data&gt;</code> 帐号数据字符串<br> --ftp-alternative-to-user <code>&lt;command&gt;</code> 用于替代USER <code>[name]</code>的字符串<br> --ftp-create-dirs 如果不存在则创建远程目录<br> --ftp-method <code>&lt;method&gt;</code> 控制CWD使用<br> --ftp-pasv 使用PASV/EPSV而不是PORT</em></p></li><li><p>-P,</p><p><em>--ftp-port <code>&lt;address&gt;</code> 使用PORT而不是PASV<br> --ftp-pret 在PASV之前发送PRET<br> --ftp-skip-pasv-ip 跳过PASV的IP地址<br> --ftp-ssl-ccc 在身份验证后发送CCC<br> --ftp-ssl-ccc-mode <code>&lt;active/passive&gt;</code> 设置CCC模式<br> --ftp-ssl-control 要求FTP登录时使用SSL/TLS；传输时清楚</em></p></li><li><p>-G,</p><p><em>--get 将POST数据放入URL并使用GET</em></p></li><li><p>-g,</p><p><em>--globoff 禁用使用{}和[]的URL序列和范围<br> --happy-eyeballs-timeout-ms <code>&lt;milliseconds&gt;</code> 尝试IPv6之前的时间<br> --haproxy-clientip 在HAProxy PROXY协议v1头中设置客户端IP<br> --haproxy-protocol 发送HAProxy PROXY协议v1头</em></p></li><li><p>-I,</p><p><em>--head 只显示文档信息</em></p></li><li><p>-H,</p><p><em>--header header/@file 将自定义头部传递给服务器</em></p></li><li><p>-h,</p><p><em>--help <code>&lt;category&gt;</code> 获取命令的帮助<br> --hostpubmd5 <code>&lt;md5&gt;</code> 可接受的主机公钥的MD5哈希<br> --hostpubsha256 <code>&lt;sha256&gt;</code> 可接受的主机公钥的SHA256哈希<br> --hsts <code>&lt;file name&gt;</code> 使用此缓存文件启用HSTS<br> --http0.9 允许 HTTP 0.9 响应</em></p></li><li><p>-0,</p><p><em>--http1.0 使用 HTTP 1.0<br> --http1.1 使用 HTTP 1.1<br> --http2 使用 HTTP/2<br> --http2-prior-knowledge 使用 HTTP 2，而不是 HTTP/1.1 升级<br> --http3 使用 HTTP v3<br> --http3-only 仅使用 HTTP v3<br> --ignore-content-length 忽略远程资源的大小</em></p></li><li><p>-i,</p><p><em>--include 在输出中包含协议响应头部</em></p></li><li><p>-k,</p><p><em>--insecure 允许不安全的服务器连接<br> --interface <code>&lt;name&gt;</code> 使用网络界面（或地址）<br> --ipfs-gateway <code>&lt;URL&gt;</code> IPFS的网关</em></p></li><li><p>-4,</p><p><em>--ipv4 将名称解析为IPv4地址</em></p></li><li><p>-6,</p><p><em>--ipv6 将名称解析为IPv6地址<br> --json <code>&lt;data&gt;</code> HTTP POST JSON</em></p></li><li><p>-j,</p><p><em>--junk-session-cookies 忽略从文件中读取的会话cookie<br> --keepalive-time <code>&lt;seconds&gt;</code> 保持连接活动的时间间隔<br> --key <code>&lt;key&gt;</code> 私钥文件名<br> --key-type <code>&lt;type&gt;</code> 私钥文件类型(DER/PEM/ENG)<br> --krb <code>&lt;level&gt;</code> 启用Kerberos，使用的安全级别<br> --libcurl <code>&lt;file&gt;</code> 将此命令行的等效libcurl代码转储到此文件<br> --limit-rate <code>&lt;speed&gt;</code> 限制传输速度为速率</em></p></li><li><p>-l,</p><p><em>--list-only 仅列表模式<br> --local-port <code>&lt;num/range&gt;</code> 强制使用RANGE进行本地端口号</em></p></li><li><p>-L,</p><p><em>--location 跟随重定向<br> --location-trusted 类似于--location，并将身份验证发送到其他主机<br> --login-options <code>&lt;options&gt;</code> 服务器登录选项<br> --mail-auth <code>&lt;address&gt;</code> 原始电子邮件的发件人地址<br> --mail-from <code>&lt;address&gt;</code> 发送邮件给该地址<br> --mail-rcpt <code>&lt;address&gt;</code> 发送邮件到该地址<br> --mail-rcpt-allowfails 允许某些收件人的RCPT TO命令失败</em></p></li><li><p>-M,</p><p><em>--manual 显示完整手册<br> --max-filesize <code>&lt;bytes&gt;</code> 下载的最大文件大小<br> --max-redirs <code>&lt;num&gt;</code> 允许的最大重定向次数</em></p></li><li><p>-m,</p><p><em>--max-time <code>&lt;fractional seconds&gt;</code> 传输的最大时间<br> --metalink 将给定的URL视为metalink XML文件<br> --negotiate 使用HTTP Negotiate (SPNEGO)身份验证</em></p></li><li><p>-n,</p><p><em>--netrc 读取 .netrc 获取用户名和密码<br> --netrc-file <code>&lt;filename&gt;</code> 指定用于netrc的文件<br> --netrc-optional 使用 .netrc 或 URL -:,<br> --next 使下一个URL使用其单独的选项集<br> --no-alpn 禁用ALPN TLS扩展</em></p></li><li><p>-N,</p><p><em>--no-buffer 禁用输出流的缓冲<br> --no-clobber 不覆盖已存在的文件<br> --no-keepalive 禁用连接上的TCP keepalive<br> --no-npn 禁用NPN TLS扩展<br> --no-progress-meter 不显示进度条<br> --no-sessionid 禁用SSL会话ID重用<br> --noproxy <code>&lt;no-proxy-list&gt;</code> 不使用代理的主机列表<br> --ntlm 使用HTTP NTLM身份验证<br> --ntlm-wb 使用带有Winbind的HTTP NTLM身份验证<br> --oauth2-bearer <code>&lt;token&gt;</code> OAuth 2 Bearer Token</em></p></li><li><p>-o,</p><p><em>--output <code>&lt;file&gt;</code> 将输出写入文件而不是标准输出<br> --output-dir <code>&lt;dir&gt;</code> 文件保存目录</em></p></li><li><p>-Z,</p><p><em>--parallel 并行执行传输<br> --parallel-immediate 不等待多路复用（使用--parallel）<br> --parallel-max <code>&lt;num&gt;</code> 并行传输的最大并发数<br> --pass <code>&lt;phrase&gt;</code> 私钥的密码<br> --path-as-is 不压缩URL路径中的..序列<br> --pinnedpubkey <code>&lt;hashes&gt;</code> FILE/HASHES 用于验证对等体的公钥<br> --post301 不在跟踪301之后切换到GET<br> --post302 不在跟踪302之后切换到GET<br> --post303 不在跟踪303之后切换到GET<br> --preproxy <code>[protocol://]host[:port]</code> 首先使用此代理</em></p></li><li><p>-#,</p><p><em>--progress-bar 显示传输进度条<br> --proto <code>&lt;protocols&gt;</code> 启用/禁用协议<br> --proto-default <code>&lt;protocol&gt;</code> 为缺少协议的任何URL使用协议<br> --proto-redir <code>&lt;protocols&gt;</code> 在重定向上启用/禁用协议</em></p></li><li><p>-x,</p><p><em>--proxy <code>[protocol://]host[:port]</code> 使用此代理<br> --proxy-anyauth 选择任意代理身份验证方法<br> --proxy-basic 在代理上使用基本身份验证<br> --proxy-ca-native 使用本地操作系统中的CA证书验证代理<br> --proxy-cacert <code>&lt;file&gt;</code> 使用此CA证书验证代理对等体<br> --proxy-capath <code>&lt;dir&gt;</code> 使用此CA目录验证代理对等体<br> --proxy-cert <code>&lt;cert[:passwd]&gt;</code> 为HTTPS代理设置客户端证书<br> --proxy-cert-type <code>&lt;type&gt;</code> 用于HTTPS代理的客户端证书类型<br> --proxy-ciphers <code>&lt;list&gt;</code> 用于代理的SSL密码<br> --proxy-crlfile <code>&lt;file&gt;</code> 设置代理的CRL列表<br> --proxy-digest 在代理上使用摘要身份验证<br> --proxy-header header/@file 将自定义头部传递给代理<br> --proxy-http2 使用HTTPS代理的HTTP/2<br> --proxy-insecure 在不验证代理的情况下进行HTTPS代理连接<br> --proxy-key <code>&lt;key&gt;</code> HTTPS代理的私钥<br> --proxy-key-type <code>&lt;type&gt;</code> HTTPS代理的私钥文件类型<br> --proxy-negotiate 在代理上使用HTTP Negotiate (SPNEGO)身份验证<br> --proxy-ntlm 在代理上使用NTLM身份验证<br> --proxy-pass <code>&lt;phrase&gt;</code> HTTPS代理的私钥密码<br> --proxy-pinnedpubkey <code>&lt;hashes&gt;</code> FILE/HASHES 用于验证代理的公钥<br> --proxy-service-name <code>&lt;name&gt;</code> SPNEGO代理服务名称<br> --proxy-ssl-allow-beast 允许HTTPS代理上的安全漏洞<br> --proxy-ssl-auto-client-cert 使用自动客户端证书代理(Schannel)<br> --proxy-tls13-ciphers <code>&lt;ciphersuite list&gt;</code> TLS 1.3代理密码套件<br> --proxy-tlsauthtype <code>&lt;type&gt;</code> HTTPS代理的TLS身份验证类型<br> --proxy-tlspassword <code>&lt;string&gt;</code> HTTPS代理的TLS密码<br> --proxy-tlsuser <code>&lt;name&gt;</code> HTTPS代理的TLS用户名<br> --proxy-tlsv1 使用TLSv1连接到HTTPS代理</em></p></li><li><p>-U,</p><p><em>--proxy-user user:password 代理用户和密码<br> --proxy1.0 <code>&lt;host[:port]&gt;</code> 使用给定端口上的HTTP/1.0代理</em></p></li><li><p>-p,</p><p><em>--proxytunnel 通过HTTP代理隧道操作（使用CONNECT）<br> --pubkey <code>&lt;key&gt;</code> SSH公钥文件名</em></p></li><li><p>-Q,</p><p><em>--quote <code>&lt;command&gt;</code> 在传输前向服务器发送命令<br> --random-file <code>&lt;file&gt;</code> 从文件中读取随机数据</em></p></li><li><p>-r,</p><p><em>--range <code>&lt;range&gt;</code> 仅获取范围内的字节<br> --rate <code>&lt;max request rate&gt;</code> 串行传输的请求速率<br> --raw 执行HTTP &quot;raw&quot;，不进行传输解码</em></p></li><li><p>-e,</p><p><em>--referer <code>&lt;URL&gt;</code> 引用链接</em></p></li><li><p>-J,</p><p><em>--remote-header-name 使用头文件提供的文件名</em></p></li><li><p>-O,</p><p><em>--remote-name 将输出写入命名为远程文件的文件<br> --remote-name-all 对所有URL使用远程文件名</em></p></li><li><p>-R,</p><p><em>--remote-time 设置本地输出的远程文件的时间<br> --remove-on-error 在出现错误时删除输出文件</em></p></li><li><p>-X,</p><p><em>--request <code>&lt;method&gt;</code> 指定要使用的请求方法<br> --request-target <code>&lt;path&gt;</code> 指定此请求的目标<br> --resolve <code>&lt;[+]host:port:addr[,addr]...&gt;</code> 将主机+端口解析为此地址<br> --retry <code>&lt;num&gt;</code> 在遇到临时问题时重试请求<br> --retry-all-errors 重试所有错误（与--retry一起使用）<br> --retry-connrefused 在遇到连接被拒绝时重试（与--retry一起使用）<br> --retry-delay <code>&lt;seconds&gt;</code> 重试之间的等待时间<br> --retry-max-time <code>&lt;seconds&gt;</code> 仅在此时间段内重试<br> --sasl-authzid <code>&lt;identity&gt;</code> SASL PLAIN身份验证的身份<br> --sasl-ir 启用SASL身份验证的初始响应<br> --service-name <code>&lt;name&gt;</code> SPNEGO服务名称</em></p></li><li><p>-S,</p><p><em>--show-error 甚至在使用-s时显示错误</em></p></li><li><p>-s,</p><p><em>--silent 静默模式<br> --socks4 <code>&lt;host[:port]&gt;</code> 使用给定主机+端口的SOCKS4代理<br> --socks4a <code>&lt;host[:port]&gt;</code> 使用给定主机+端口的SOCKS4a代理<br> --socks5 <code>&lt;host[:port]&gt;</code> 使用给定主机+端口的SOCKS5代理<br> --socks5-basic 为SOCKS5代理启用用户名/密码身份验证<br> --socks5-gssapi 为SOCKS5代理启用GSS-API身份验证<br> --socks5-gssapi-nec 兼容NEC SOCKS5服务器<br> --socks5-gssapi-service <code>&lt;name&gt;</code> SOCKS5代理的GSS-API服务名称<br> --socks5-hostname <code>&lt;host[:port]&gt;</code> SOCKS5代理，将主机名传递给代理</em></p></li><li><p>-Y,</p><p><em>--speed-limit <code>&lt;speed&gt;</code> 停止比此速度慢的传输</em></p></li><li><p>-y,</p><p><em>--speed-time <code>&lt;seconds&gt;</code> 在此时间后触发 &#39;speed-limit&#39; 中止 --ssl 尝试SSL/TLS<br> --ssl-allow-beast 允许改进互操作性的安全漏洞<br> --ssl-auto-client-cert 使用自动客户端证书（Schannel）<br> --ssl-no-revoke 禁用证书吊销检查（Schannel）<br> --ssl-reqd 要求SSL/TLS<br> --ssl-revoke-best-effort 忽略缺少/离线证书CRL分发点（Schannel）</em></p></li><li><p>-2,</p><p><em>--sslv2 使用SSLv2</em></p></li><li><p>-3,</p><p><em>--sslv3 使用SSLv3<br> --stderr <code>&lt;file&gt;</code> 将stderr重定向到文件<br> --styled-output 启用HTTP头部的样式化输出<br> --suppress-connect-headers 忽略代理CONNECT响应头部<br> --tcp-fastopen 使用TCP Fast Open<br> --tcp-nodelay 使用TCP_NODELAY选项</em></p></li><li><p>-t,</p><p><em>--telnet-option &lt;opt=val&gt; 设置telnet选项<br> --tftp-blksize <code>&lt;value&gt;</code> 设置TFTP BLKSIZE选项<br> --tftp-no-options 不发送任何TFTP选项</em></p></li><li><p>-z,</p><p><em>--time-cond <code>&lt;time&gt;</code> 基于时间条件进行传输<br> --tls-max <code>&lt;VERSION&gt;</code> 设置允许的最大TLS版本<br> --tls13-ciphers <code>&lt;ciphersuite list&gt;</code> 使用的TLS 1.3密码套件<br> --tlsauthtype <code>&lt;type&gt;</code> TLS认证类型<br> --tlspassword <code>&lt;string&gt;</code> TLS密码<br> --tlsuser <code>&lt;name&gt;</code> TLS用户名</em></p></li><li><p>-1,</p><p><em>--tlsv1 使用TLSv1.0或更高版本<br> --tlsv1.0 使用TLSv1.0或更高版本<br> --tlsv1.1 使用TLSv1.1或更高版本<br> --tlsv1.2 使用TLSv1.2或更高版本<br> --tlsv1.3 使用TLSv1.3或更高版本<br> --tr-encoding 请求使用压缩传输编码<br> --trace <code>&lt;file&gt;</code> 将调试跟踪输出写入文件<br> --trace-ascii <code>&lt;file&gt;</code> 类似于--trace，但无十六进制输出<br> --trace-config <code>&lt;string&gt;</code> 在跟踪/详细输出中记录的详细信息<br> --trace-ids 将传输和连接标识符添加到跟踪/详细输出中<br> --trace-time 在跟踪/详细输出中添加时间戳<br> --unix-socket <code>&lt;path&gt;</code> 通过此Unix域套接字连接</em></p></li><li><p>-T,</p><p><em>--upload-file <code>&lt;file&gt;</code> 将本地文件传输到目标位置<br> --url <code>&lt;url&gt;</code> 要操作的URL<br> --url-query <code>&lt;data&gt;</code> 添加URL查询部分</em></p></li><li><p>-B,</p><p><em>--use-ascii 使用ASCII/文本传输</em></p></li><li><p>-u,</p><p><em>--user user:password 服务器用户名和密码</em></p></li><li><p>-A,</p><p><em>--user-agent <code>&lt;name&gt;</code> 发送User-Agent <code>&lt;name&gt;</code>到服务器<br> --variable &lt;[%]name=text/@file&gt; 设置变量</em></p></li><li><p>-v,</p><p><em>--verbose 使操作更冗长</em></p></li><li><p>-V,</p><p><em>--version 显示版本号并退出</em></p></li><li><p>-w,</p><p><em>--write-out <code>&lt;format&gt;</code> 完成后使用输出格式<br> --xattr 将元数据存储在扩展文件属性中</em></p></li></ul><h4 id="下面我们来试试-😎" tabindex="-1">下面我们来试试 😎 <a class="header-anchor" href="#下面我们来试试-😎" aria-label="Permalink to &quot;下面我们来试试 😎&quot;">​</a></h4><p>文档太复杂太多了，那我们如何来 <code>c</code> <code>url</code>呢？2个 demo 你就明白啦~</p><ul><li>我们给 <code>baidu.com</code> 发一个 <code>GET</code> 请求（注意一下 <code>windows</code> 系统只能用 <code>&quot;</code> 来标记字符串哟~）</li></ul><p><img src="https://github.com/newObjectccc/newObjectccc.github.io/assets/42132586/7860f3ff-fd14-4966-b781-22ec37d1ecde" alt="carbon"></p><p>得到下图：</p><p><img src="https://github.com/newObjectccc/newObjectccc.github.io/assets/42132586/dbfe00bd-0012-4fa4-acdb-45617ca8f001" alt="image"></p><ul><li>我们再给我本地项目的注册接口发一个 <code>POST</code> 请求</li></ul><p><img src="https://github.com/newObjectccc/newObjectccc.github.io/assets/42132586/a0086802-2d61-4631-8693-cb02a0a43058" alt="carbon"></p><p>得到下图：</p><p><img src="https://github.com/newObjectccc/newObjectccc.github.io/assets/42132586/87321f3b-9923-4341-8ebc-36960dca95f9" alt="image"></p><p>demo 就这俩吧~ 吃饭去~</p><hr><p>😊okk~ CURL 功能非常强大，随手就能发起请求，希望能够帮到各位，如有纰漏，欢迎指正~</p>',28),d=[l];function p(i,a,s,b,m,n){return o(),t("div",null,d)}const S=e(r,[["render",p]]);export{T as __pageData,S as default};
