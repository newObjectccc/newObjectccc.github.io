import{_ as e,c,o as t,a4 as o}from"./chunks/framework.nQaBHiNx.js";const n=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"前端业务实践/你应该知道如何用VSCode进行Debugger.md","filePath":"前端业务实践/你应该知道如何用VSCode进行Debugger.md"}'),a={name:"前端业务实践/你应该知道如何用VSCode进行Debugger.md"},i=o('<h1 id="" tabindex="-1"><a class="header-anchor" href="#" aria-label="Permalink to &quot;&quot;">​</a></h1><h2 id="🚀你应该知道如何用vscode进行debugger" tabindex="-1">🚀你应该知道如何用VSCode进行Debugger <a class="header-anchor" href="#🚀你应该知道如何用vscode进行debugger" aria-label="Permalink to &quot;🚀你应该知道如何用VSCode进行Debugger&quot;">​</a></h2><p>相信有很多小伙伴有都有使用过 Visual Studio Code ，它的确很不错，我从 Atom，Vim，NeoVim，一路辗转过来，确实还是挺好用的，开始有种想要慢慢脱离 Vim 模式的冲动。</p><p>如果你的 <code>Web App</code> 能够在 VSCode 中开始调试的话，应该能提高不少写 Bug 的效率吧~</p><p>here we go！🚀</p><p>ps：以下是基于 <code>vscode</code> 哟，如果你没有 <code>vscode</code>，那么再见~</p><h3 id="正文开始👉" tabindex="-1">正文开始👉 <a class="header-anchor" href="#正文开始👉" aria-label="Permalink to &quot;正文开始👉&quot;">​</a></h3><hr><p>下面我以我的项目代码为例，给大家粗浅的介绍一些 VSCode 的 Debugger 功能。</p><h4 id="_1-首先打开-vscode📌" tabindex="-1">1. 首先打开 VSCode📌 <a class="header-anchor" href="#_1-首先打开-vscode📌" aria-label="Permalink to &quot;1. 首先打开 VSCode📌&quot;">​</a></h4><ul><li>进入你的项目目录中，并点击这个 <code>debugger</code> 图标，或者是 <code>ctrl + shift + d</code>，你也可以直接按 <code>F5</code></li></ul><p><img src="https://github.com/newObjectccc/newObjectccc.github.io/assets/42132586/fa926a80-a6d4-4e7b-9fed-41fd1f5693dc" alt="image"></p><ul><li>然后点击生成 <code>launch.json</code> 文件，</li></ul><p><img src="https://github.com/newObjectccc/newObjectccc.github.io/assets/42132586/4d9552a2-1c4c-47db-8ccd-29496f50ef23" alt="image"></p><ul><li>如果你是按的 <code>F5</code> 应该会直接弹出 <code>VSCode</code> 的命令窗，直接选择下面这个，<code>VSCode</code> 会在项目根目录下创建一个 .vscode 的文件夹，并生成 <code>launch.json</code> 文件</li></ul><p><img src="https://github.com/newObjectccc/newObjectccc.github.io/assets/42132586/c97884b7-b29a-4682-acf0-abe8cf828cb9" alt="image"></p><h4 id="_2-确认端口号📌" tabindex="-1">2. 确认端口号📌 <a class="header-anchor" href="#_2-确认端口号📌" aria-label="Permalink to &quot;2. 确认端口号📌&quot;">​</a></h4><p>在我们开始 <code>debugger</code> 之前，我们需要确认 <code>launch.json</code> 文件里的端口号是否是你本地开发的端口号</p><p><img src="https://github.com/newObjectccc/newObjectccc.github.io/assets/42132586/4249f7d7-a038-4016-ad96-58b895fe548f" alt="carbon"></p><ul><li>接下来就在本地跑起来你的项目，并打开你想要 <code>Debugger</code> 的 js 文件</li></ul><h4 id="_3-开始-debug📌" tabindex="-1">3. 开始 Debug📌 <a class="header-anchor" href="#_3-开始-debug📌" aria-label="Permalink to &quot;3. 开始 Debug📌&quot;">​</a></h4><p>在你的文件里面打上你的小红点，并且如果你鼠标右键单击的话，可以看到还有很多功能~</p><p><img src="https://github.com/newObjectccc/newObjectccc.github.io/assets/42132586/6dd72f00-36ca-47b5-8ac7-92e57033aad8" alt="image"></p><ul><li>这里你还可以输入你的表达式，来设定条件断点</li></ul><p>接下来就去触发你的函数，或者渲染方法吧</p><p><img src="https://github.com/newObjectccc/newObjectccc.github.io/assets/42132586/2140db6f-8ce5-4c06-88e0-e283975fb996" alt="image"></p><ul><li>当执行到了我们设定的断点的时候，我们看下面这张图</li></ul><p><img src="https://github.com/newObjectccc/newObjectccc.github.io/assets/42132586/60807531-1756-4e12-95f4-1b0910010f93" alt="image"></p><p>左边有各种监控信息，比如：</p><ul><li>变量</li><li>监视</li><li>调用堆栈（当你读框架源码的时候，非常有用）</li><li>已载入的脚本</li><li>断点信息</li><li>事件监听断点</li></ul><p>几乎是和浏览器一模一样，浏览器有的，他都有~</p><p><img src="https://github.com/newObjectccc/newObjectccc.github.io/assets/42132586/3b49bec4-23b4-4690-b4dc-a50e1f4c74bc" alt="image"></p><p><code>F5</code> 和 <code>F10</code> 应该都能看懂，</p><p>📌简单聊一下这俩吧：</p><ul><li>假设这是你目前 <code>Debug</code> 停留的断点处是 <code>Function Two</code></li></ul><p><img src="https://github.com/newObjectccc/newObjectccc.github.io/assets/42132586/911416d8-0f72-406f-aad1-1c80bc451edd" alt="image"></p><ul><li><code>F11</code>: <em>会走到 <code>Function Three</code>，执行栈向下</em></li><li><code>shift + F11</code>: <em>会走到 <code>Function One</code>，执行栈向上</em></li></ul><p><img src="https://github.com/newObjectccc/newObjectccc.github.io/assets/42132586/6bcad45d-c144-4601-af75-e60719b5224d" alt="image"></p><p>当然了，如果向下或向上都没有了，自然就跳出了~</p><hr><p>😊okk~ 赶紧去Debugger你的程序吧~</p>',41),d=[i];function s(l,b,u,r,h,g){return t(),c("div",null,d)}const m=e(a,[["render",s]]);export{n as __pageData,m as default};
